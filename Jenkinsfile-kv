pipeline {
    agent any

    options {
        ansiColor('xterm')
    }

    environment {
        // Archivo secreto con configuraciÃ³n en formato JSON
        JOHN_SECRET = credentials('john-secret-kv') // ID de la credencial Azure Key Vault
    }

    stages {
        stage('Login en Azure') {
            steps {
                withCredentials([azureServicePrincipal(credentialsId: 'credentials_id')]) {
                    sh '''
                        echo "Autenticando en Azure..."
                        az login --service-principal \
                            -u "$AZURE_CLIENT_ID" \
                            -p "$AZURE_CLIENT_SECRET" \
                            --tenant "$AZURE_TENANT_ID"

                        az account set --subscription "$AZURE_SUBSCRIPTION_ID"
                    '''
                }
            }
        }

        stage('Apply Azure Function settings from Key Vault Secret') {
            steps {
                script {
                    // Parsear el JSON del secreto
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def jsonObject = jsonSlurper.parseText(JOHN_SECRET)

                    // Construir los comandos para az functionapp config appsettings set
                    def commands = []
                    jsonObject.each { key, value ->
                        commands.add("az functionapp config appsettings set --name func-func-dev-eastus --resource-group rg-func-dev-eastus --settings \"${key}=${value}\"")
                    }

                    // Ejecutar los comandos
                    sh(commands.join(' && '))
                }
            }
        }
    }
}